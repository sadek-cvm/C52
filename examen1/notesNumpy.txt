data_1 = np.array([1, 2, 3, 4, 5, 6])
data_2 = np.array([[1, 2, 3], 
                   [4, 5, 6]], np.uint16)
data_3 = np.array([
                   [  [1., 1.5, 2.],
                      [3., 3.5, 4.] ],
                   
                   [  [9., 8.5, 8.],
                      [7., 6.5, 6.] ]  
                  ])

- dtype : uint16
- ndim : 2
- shape : (2, 3)
- size : 6

np.empty((2, 3))
np.identity(3)
np.zeros(15)
np.ones((2, 10))
np.full((2, 2, 3, 4), -10)

----------------------------------------------------------------- série de 0 à 9
------------------------------------------------------------------ np.arange(10)
[0 1 2 3 4 5 6 7 8 9]
------------------------------------------------------- série de 0, 10, 20...100
---------------------------------------------------------- np.arange(0, 110, 10)
[  0  10  20  30  40  50  60  70  80  90 100]
-------------------------------------------------- série de 11 données de 0 à 10
------------------------------------------------------- np.linspace(0., 10., 11)
[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9. 10.]
--------------------------------------------------- série de 5 données de 0 à 10
-------------------------------------------------------- np.linspace(0., 10., 5)
[ 0.   2.5  5.   7.5 10. ]
---------------------------------------------------------------------- x^2 + y^2
--------------------------------------------- np.fromfunction(my_func_1, (2, 5))
[[ 0.  1.  4.  9. 16.]
 [ 1.  2.  5. 10. 17.]]
-------------------------------------------------- 100 par ligne + 1 par colonne
--------------------------------------------- np.fromfunction(my_func_2, (2, 5))
[[101. 102. 103. 104. 105.]
 [201. 202. 203. 204. 205.]]
[0.0, 0.5, 2.0, 4.5, 8.0, 12.5, 18.0, 24.5, 32.0, 40.5]
-------------------------------------------------------------- itérateur : i^2/2
--------------------------------------------------- np.fromiter(iter1, np.int32)
[ 0  0  2  4  8 12 18 24 32 40]
-------------------------------------------------------- itérateur : série de pi
------------------------------------------------- np.fromiter(iter2, np.float32)
[ 4.0000000e+00 -1.3333334e+00  8.0000001e-01 ... -2.0000500e-05
  2.0000300e-05 -2.0000100e-05]



rng = np.random.default_rng(123)

------------------------------------------------------------- [0.0..1.0] : 2 x 3
-------------------------------------------------------------- rng.random((2,3))
[[0.68235186 0.05382102 0.22035987]
 [0.18437181 0.1759059  0.81209451]]
--------------------------------------------------------------- [10..20] : 2 x 4
---------------------------------------------------- rng.integers(10, 20, (2,4))
[[14 19 14 12]
 [17 18 18 18]]
------------------------------------------------------------ [-5.0..5.0] : 2 x 4
------------------------------------------------------ rng.uniform(-5, 5, (2,4))
[[ 0.12970455 -2.55035399  3.24241596 -2.86237037]
 [ 2.41467052  1.29940205  4.27407259 -2.68091811]]
---------------------------------------------------------- dist. normale : 2 x 3
--------------------------------------------------- rng.normal(10.0, 1.5, (2,3))
[[ 9.53230772 10.50665369  6.68879335]
 [11.24188216 12.31244559 11.69021019]]
--------------------------------------------------------------------------- test
[  0  10  20  30  40  50  60  70  80  90 100]
------------------------------------------------------------ rng.choice(test, 3)
[40 20 30]
-------------------------------------------------------------- rng.shuffle(test)
[ 80  90   0  50 100  10  70  60  40  20  30]

data = np.arange(24)
data.reshape((2,12))
data.reshape((12,2))
data = np.arange(24).reshape(4,6)
data.flatten()
data.astype(np.float)

data = np.array([[0, 1, 2, 3, 4, 5],
                 [6, 7, 8, 9, 10, 11],
                 [12, 13, 14, 15, 16, 17],
                 [18, 19, 20, 21, 22, 23]])

result = data[3:0:-1, 1:6:2]

[[19 21]
 [13 15]
 [ 7  9]]

 -------------------------------------------------------------------------- data1
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
-------------------------------------------------------------------------- data2
[[10 11 12 13]
 [14 15 16 17]
 [18 19 20 21]]
------------------------------------------------------------------ data1 + data2
[[10 12 14 16]
 [18 20 22 24]
 [26 28 30 32]]
------------------------------------------------------------------ data1 * data2
[[  0  11  24  39]
 [ 56  75  96 119]
 [144 171 200 231]]
-------------------------------------------------------------------- data1 + 100
[[100 101 102 103]
 [104 105 106 107]
 [108 109 110 111]]
-------------------------------------------------------------------- data1 / 100
[[0.   0.01 0.02 0.03]
 [0.04 0.05 0.06 0.07]
 [0.08 0.09 0.1  0.11]]
--------------------------------------------------------------------- data1 ** 2
...
 [False False  True  True]
 [ True  True  True  True]
--------------------------------------------------------------- data1[data1 > 5]

-------------------------------------------------------------------------- data1
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
-------------------------------------------------------------------------- data2
[[10 11 12 13]
 [14 15 16 17]
 [18 19 20 21]]
------------------------------------------------------------------ np.sum(data1)
66
---------------------------------------------------------- np.sum(data1, axis=0)
[12 15 18 21]
---------------------------------------------------------- np.sum(data1, axis=1)
[ 6 22 38]
------------------------------------------------------------------ np.min(data1)
0
------------------------------------------------------------------ np.max(data1)
11
----------------------------------------------------------------- np.mean(data1)
5.5
--------------------------------------------------------------- np.median(data1)
5.5
------------------------------------------------------------------ np.std(data1)
3.452052529534663
---------------------------------------- np.sum((data1 - data2)**2, axis=0)**0.5
...
-------------------------------------------------------- np.round(data1 ** 2.37)
[[  0.   1.   5.  14.]
 [ 27.  45.  70. 101.]
 [138. 183. 234. 294.]]

 -------------------------------------------------------------------------- data1
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]
-------------------------------------------------------------------------- data2
[ 0 10 20 30]
-------------------------------------------------------------------------- data3
[[ 0]
 [10]
 [20]]
------------------------------------------------------------------ data1 + data2
[[ 0 11 22 33]
 [ 4 15 26 37]
 [ 8 19 30 41]]
------------------------------------------------------------------ data1 + data3
[[ 0  1  2  3]
 [14 15 16 17]
 [28 29 30 31]]
------------------------------------------------------------------ data2 + data3
[[ 0 10 20 30]
 [10 20 30 40]
 [20 30 40 50]]

c, r = np.meshgrid(np.arange(image.shape[1]), np.arange(image.shape[0]))


values2 = [i**2 for i in range(10) if i % 2 == 0] # comprehension list
text = 'Hello world'
print('Text without "l" : ', ''.join([i for i in text if i != 'l']))

print([i for i in range(10) if i % 2])
print([i if i % 2 else '!' for i in range(10) ])

b = deepcopy(a)